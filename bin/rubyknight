#!/usr/bin/env ruby

require 'rubyknight'

def time_it label
	yield
end

module Enumerable
	def rand
		self[Kernel.rand(self.size)]
	end
end

def displayb b, evaluator
	puts "#{b.to_s}\n"
	moves = b.gen_legal_moves
	puts "Score: #{evaluator.eval_position}"
#	puts "Moves: #{moves.size}"
#	i=1
#	moves.each do |m|
#		print m.join(',')
#		if i % 13 == 0 then print "\n"
#		else print ' ' end
#		i+=1
#	end
#	print "\n"
	if moves.size == 0
		puts "Checkmate, you lose."
		Kernel.exit 0
	end
	print "Enter move [#{b.white_to_play? ? 'White' : 'Black'}]> "
end

Thread.abort_on_exception = true

def play b, eval
	moves = b.gen_legal_moves
	if moves.size == 0
		puts "Checkmate, you win!"	
		Kernel.exit(0)
	end
	# move = moves.rand
	@thinking = Thread.new { eval.think(b.white_to_play?) }
	until eval.donethinking; sleep(1.2); end
	move = eval.bestmove
	b.cnotation_move "#{RubyKnight::Board.position_to_coord move[0]}#{RubyKnight::Board.position_to_coord move[1]}"
end

def help
	puts
	puts "Enter a move such as e2e4, or a command."
	puts "Commands are prefixed with !"
	puts "  !quit - quit"
	puts "  !undo - revert a move"
	puts "  !load <file> - load game state from a file"
	puts "  !dump <file> - dump game state to a file"
	puts "  !play - tell the computer to start playing the current color"
	puts "  !reset - start a new game"
	puts
end

help 
cplay = false
b = RubyKnight::Board.new
eval = RubyKnight::BoardEvaluator.new b
displayb b, eval
#['e2e4' , 'e7e5' , 'd2d3'].each do |move|
#['e2e4','d7d5','e4e5','f7f5'].each do |move|
$stdin.each do |move|
	move.strip!
	if move =~ /!([^ ]*)[ ]*(.*)/
		case $1
			when "quit" then Kernel.exit 
			when "undo" then b.undo 2
			when "play" 
				cplay = !cplay
				play(b, eval) if cplay
			when "dump" 
				File.open( $2, "w") { |f| f.write( b.dump) }
				puts "dumped."
			when "load" 
				File.open( $2, "r") { |f| b.load( f.readlines.join) }
				eval = RubyKnight::BoardEvaluator.new b
				puts "loaded."
			when "reset" 
				b = RubyKnight::Board.new
				eval = RubyKnight::BoardEvaluator.new b
			when "help" 
				help
		end
		displayb b,eval
	else
		begin
			b.cnotation_move move
			play(b,eval) if cplay
		rescue RubyKnight::IllegalMoveException
			print "Enter a real move! #{$!.to_s}\n"
		end
		displayb b,eval
	end
end

