#!/usr/bin/env ruby

require 'rubyknight'

confirm = false
$stdout.sync=true
$stderr.sync=true
Thread.abort_on_exception = true

def time_it label
	yield
end

def logout msg
	$stderr.print "Out:#{msg}\n"		
	print "#{msg}\n"		
end

module Enumerable
	def rand
		self[Kernel.rand(self.size)]
	end
end


def tocnote move
	"#{RubyKnight::Board.position_to_coord move[0]}#{RubyKnight::Board.position_to_coord move[1]}"
end

def play b, eval
	moves = b.gen_legal_moves
	if moves.size == 0
		puts "RESULT 1-0 {White Mates}"
	end
	thinking = Thread.new { eval.think(b.white_to_play?) }
	until eval.donethinking; sleep(0.2); end
	move = eval.bestmove
	cnotation = tocnote move
	b.cnotation_move cnotation
	logout "move #{cnotation}"
end

b = RubyKnight::Board.new
eval = RubyKnight::BoardEvaluator.new b
$stdin.each do |move|
	move.strip!
	$stderr.print "In :#{move}\n"
	case move	
		when "xboard" then 
			logout ""
			logout "tellics set f5 1=1"
		when "confirm_moves"
			confirm = true	
			logout "Will now confirm moves."	
		when /.{0,1}new/
			b = RubyKnight::Board.new
			eval = RubyKnight::BoardEvaluator.new b
			logout "tellics set 1 RubyKnight"
		when /^protover/ then 
			logout "feature sigint=0 sigterm=0 ping=1 done=1"	
		when /^ping\s+(.*)/ then 
			logout "pong #{$1}"	
		when /^st/ then 
		when /^level/ then 
		when /^time/ then 
		when /^otim/ then 
		when "hard" then 
		when "random" then 
		when /^accepted/ then 
			# ignore	
		else		
			move.gsub!(/\?/, '')	
			begin
				b.cnotation_move move
				logout "Legal move: #{move}" if confirm
				play(b,eval)
			rescue RubyKnight::IllegalMoveException
				logout "Illegal move: #{move}"
			rescue	Exception=> e
				puts e	
			end
	end
end


